USE FAASOS;
drop table if exists driver;
CREATE TABLE driver(driver_id integer,reg_date date); 

INSERT INTO driver(driver_id,reg_date) 
 VALUES (1,'2021-01-01'),
(2,'2021-03-01'),
(3,'2021-01-08'),
(4,'2021-01-15');


drop table if exists ingredients;
CREATE TABLE ingredients(ingredients_id integer,ingredients_name varchar(60)); 

INSERT INTO ingredients(ingredients_id ,ingredients_name) 
 VALUES (1,'BBQ Chicken'),
(2,'Chilli Sauce'),
(3,'Chicken'),
(4,'Cheese'),
(5,'Kebab'),
(6,'Mushrooms'),
(7,'Onions'),
(8,'Egg'),
(9,'Peppers'),
(10,'schezwan sauce'),
(11,'Tomatoes'),
(12,'Tomato Sauce');

drop table if exists rolls;
CREATE TABLE rolls(roll_id integer,roll_name varchar(30)); 

INSERT INTO rolls(roll_id ,roll_name) 
 VALUES (1	,'Non Veg Roll'),
(2	,'Veg Roll');

drop table if exists rolls_recipes;
CREATE TABLE rolls_recipes(roll_id integer,ingredients varchar(24)); 

INSERT INTO rolls_recipes(roll_id ,ingredients) 
 VALUES (1,'1,2,3,4,5,6,8,10'),
(2,'4,6,7,9,11,12');

drop table if exists driver_order;
CREATE TABLE driver_order(order_id integer,driver_id integer,pickup_time datetime,distance VARCHAR(7),duration VARCHAR(10),cancellation VARCHAR(23));
INSERT INTO driver_order(order_id,driver_id,pickup_time,distance,duration,cancellation) 
VALUES(1,1,'2021-01-01 18:15:34','20km','32 minutes',''),
(2,1,'2021-01-01 19:10:54','20km','27 minutes',''),
(3,1,'2021-01-03 00:12:37','13.4km','20 mins','NaN'),
(4,2,'2021-01-04 13:53:03','23.4','40','NaN'),
(5,3,'2021-01-08 21:10:57','10','15','NaN'),
(6,3,null,null,null,'Cancellation'),
(7,2,'2021-01-08 21:30:45','25km','25mins',null),
(8,2,'2021-01-10 00:15:02','23.4 km','15 minute',null),
(9,2,null,null,null,'Customer Cancellation'),
(10,1,'2021-01-11 18:50:20','10km','10minutes',null);

UPDATE DRIVER_ORDER
SET pickup_time = DATE_FORMAT(pickup_time, '%Y-01-%d')
WHERE MONTH(pickup_time) = 3;



drop table if exists customer_orders;
CREATE TABLE customer_orders(order_id integer,customer_id integer,roll_id integer,not_include_items VARCHAR(4),extra_items_included VARCHAR(4),order_date datetime);
INSERT INTO customer_orders(order_id,customer_id,roll_id,not_include_items,extra_items_included,order_date)
values (1,101,1,'','','2021-01-01 18:05:02'),
(2,101,1,'','','2021-01-01 19:00:52'),
(3,102,1,'','','2021-01-02 23:51:23'),
(3,102,2,'','NaN','2021-01-02 23:51:23'),
(4,103,1,'4','','2021-01-04 13:23:46'),
(4,103,1,'4','','2021-01-04 13:23:46'),
(4,103,2,'4','','2021-01-04 13:23:46'),
(5,104,1,null,'1','2021-01-08 21:00:29'),
(6,101,2,null,null,'2021-01-08 21:03:13'),
(7,105,2,null,'1','2021-01-08 21:20:29'),
(8,102,1,null,null,'2021-01-09 23:54:33'),
(9,103,1,'4','1,5','2021-01-10 11:22:59'),
(10,104,1,null,null,'2021-01-11 18:34:49'),
(10,104,1,'2,6','1,4','2021-01-11 18:34:49');

select * from customer_orders;
select * from driver_order;
select * from ingredients;
select * from driver;
select * from rolls;
select * from rolls_recipes;
/*
A.ROLL METRICS
B.DRIVER AND CUSTOMER EXPERIENCE
C.INGREDIENT OPTIMISATION
D.PRICING AND RATINGS
*/
-- HOW MANY ROLLS WERE ORDERED
SELECT
COUNT(ROLL_ID)
FROM CUSTOMER_ORDERS ;

-- HOW MANY UNIQUE CUSTOMER ORDERS WERE MADE
SELECT
COUNT(distinct CUSTOMER_ID)
FROM CUSTOMER_ORDERS;

-- HOW MANY SUCCESSFUL ORDERS WERE DELIVERED BY EACH DRIVER
SELECT
DRIVER_ID,
COUNT(distinct order_id) as order_count
FROM DRIVER_ORDER
WHERE 
CANCELLATION IS NOT NULL 
AND CANCELLATION NOT IN ('Cancellation', 'Customer Cancellation')
group by 1;    

-- how many roles were delivered by roll type
SELECT ROLL_ID,COUNT(ROLL_ID) FROM CUSTOMER_ORDERS WHERE ORDER_ID IN(
SELECT 
ORDER_ID
FROM (
SELECT *,CASE WHEN CANCELLATION IN ('Cancellation','Customer Cancellation') THEN 'C' ELSE 'NC' END AS ORDER_STATUS FROM DRIVER_ORDER
) A
WHERE ORDER_STATUS = 'NC')
GROUP BY 1;

-- HOW MANY VEG AND NON VEG ROLL WERE ORDERED BY EACH CUSTOMER
SELECT
CUSTOMER_ID,
ROLL_NAME,
COUNT(C.ROLL_ID)
FROM ROLLS R
JOIN CUSTOMER_ORDERS C ON R.ROLL_ID = C.ROLL_ID
GROUP BY 1,2
ORDER BY CUSTOMER_ID;

-- WHAT WAS THE MAXIMUM NUMBER OF ROLLS DELEIVERD IN A SINGLE ORDER
select * from (
select *, rank() over (order by cnt desc) rnk from 
(
select order_id,count(roll_id) cnt 
from (
select * from customer_orders where order_id in(
select order_id from 
(SELECT *, CASE WHEN CANCELLATION IN('Cancelled','Customer Cancellation') then 'c' else 'nc' end as order_status from driver_order) a
where order_status = 'nc'))b
group by order_id)c
)d where rnk=1;

select * from customer_orders;
select * from driver_order;
select * from ingredients;
select * from driver;
select * from rolls;
select * from rolls_recipes;

-- FOR EACH CUSTOMER , HOW MANY DELIVERED ROLLS HAD AT LEAST 1 CHANGE and how many had no changes?

	WITH TEMP_CUST_ORDERS (order_id,customer_id,roll_id,not_include_items,extra_items_included,order_date) AS 
	(
	SELECT 
	order_id,
	customer_id,
	roll_id, 
	CASE WHEN not_include_items = '' OR not_include_items IS NULL OR  not_include_items = 'NULL' THEN '0' ELSE not_include_items END AS NEW_NOT_INCLUDE_ITEMS,
	CASE WHEN extra_items_included = '' OR extra_items_included ='NaN' OR extra_items_included IS NULL OR extra_items_included = 'NULL' THEN '0' ELSE extra_items_included end as new_extra_items_included,
	order_date from customer_orders
	)
   
	,
	TEMP_DRIVER_ORDERS(order_id,driver_id,pickup_time,distance,duration,cancellation)AS 
	(
	SELECT
	ORDER_ID,
	DRIVER_ID,
	PICKUP_TIME,
	DISTANCE,
	DURATION,
	CASE WHEN CANCELLATION IN ('Cancellation','Customer Cancellation') then 0 else 1 end as new_cancellation
	from driver_order
	)
    
	SELECT CUSTOMER_ID,CHANGE_OR_NO_CHANGE,COUNT(CHANGE_OR_NO_CHANGE) FROM (
	SELECT *,
    CASE WHEN NOT_INCLUDE_ITEMS = 0 AND EXTRA_ITEMS_INCLUDED = 0 THEN 'NO_CHANGE' ELSE 'CHANGE' END AS CHANGE_OR_NO_CHANGE 
    FROM TEMP_CUST_ORDERS WHERE ORDER_ID IN(
	select ORDER_ID from TEMP_DRIVER_ORDERS where CANCELLATION !=0)
	)A GROUP BY 1,2;


-- HOW MANY ROLLS WERE DELIVERD THAT HAD BOTH EXCLUSIONS AND EXTRAS?
SELECT * FROM CUSTOMER_ORDERS WHERE ORDER_ID IN (
SELECT ORDER_ID FROM (
SELECT
*,CASE WHEN CANCELLATION IN ('Cancellation','Customer Cancellation') then 'c' else 'nc' end as ORDER_STATUS
FROM DRIVER_ORDER
)a WHERE ORDER_STATUS = 'nc'
)
